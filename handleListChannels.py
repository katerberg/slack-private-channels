"""
Slack chat-bot Lambda handler.
"""

import json
import os
import logging
import urllib.parse
import urllib.request
import re
import boto3


# Token for Slack API access
API_TOKEN = os.environ["API_TOKEN"]

# Example response
#{
#    "token": "sjdglajdg",
#    "team_id": "TEAMID",
#    "team_domain": "slalomstl",
#    "channel_id": "HKF786F4",
#    "channel_name": "slack-test",
#    "user_id": "FGJF655GG",
#    "user_name": "first.last",
#    "command": "/highfive",
#    "text": "foobar",
#    "response_url": "https://hooks.slack.com/commands/TEAMID/TRIGGER_FIRST/546gsdfakldsfg7s6gasdg",
#    "trigger_id": "TRIGGER_FIRST.12345678.aksdgnhlusadg67sdg65sadf854356"
#}

def lambda_handler(slack_event, context):
    """Handle an incoming HTTP request from a Slack chat-bot.
    """

    try:
        # We need to discriminate between events generated by
        # the users, which we want to process and handle,
        # and those generated by the bot.
        if "bot_id" in slack_event:
            logging.warn("Ignore bot event")
        else:
            logging.warn(slack_event)

            s3_obj = boto3.client('s3')
            logging.warn('set up boto3 client')
            logging.warn(s3_obj)


            bucketname = 'slack-private-channels-storage'
            itemname = 'private-channels.json'

            result = s3.get_bucket_policy(Bucket=bucketname)
            logging.warn(result)

            obj = s3.Object(bucketname, itemname)
            logging.warn('got obj')
            body = obj.get()['Body'].read()
            logging.warn('got body')
            logging.warn(body)
            s3_clientobj = s3_obj.get_object(Bucket=bucketname, Key=itemname)
            logging.warn(s3_clientobj)
            s3_clientdata = s3_clientobj['Body'].read().decode('utf-8')

            logging.warn(s3_clientdata)

        #     # Construct the HTTP request that will be sent to the Slack API.

            values = {
                "text": "Thanks for your request, we'll process it and get back to you."
            }
            request = urllib.request.Request(slack_event["response_url"])
        #     # Add a header mentioning that the text is URL-encoded.
            request.add_header(
                "Content-Type",
                "application/x-www-form-urlencoded"
            )
        #
        #     # Translate values into packet
            jsonData = json.dumps(values)
            jsonDataAsBytes = jsonData.encode('utf-8')  # needs to be bytes
            request.add_header('Content-Length', len(jsonDataAsBytes))
        #
        #     # Fire off the request!
            urllib.request.urlopen(request, jsonDataAsBytes).read()
        #
        # # Posted in #gratitude channel
        # return "Your message was posted in <#" + GRATITUDE_CHANNEL + ">"
        return "Message received";
    except:
        logging.warn("Crashed...")
        logging.warn(slack_event)
        logging.warn(context)
        return "There was an error trying to get channels. Please contact an administrator."
